<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.ArticleMapper">

	<!-- コメント -->
	<insert id="articleComment"
		parameterType="com.example.form.ArticleCommentForm">
		INSERT INTO comments(article_id, user_info_id, comment)
		VALUES(#{articleId}, #{userInfoId}, #{comment});
	</insert>
	
	<!-- コメントリスト取得 -->
	<resultMap type="com.example.domain.Comment" id="commentList">
		<id property="id" column="id"></id>
		<result property="comment" column="comment"></result>
		<result property="commentDate" column="comment_date"></result>
		<result property="likesCount" column="likes_count"></result>
		<result property="likeStatus" column="like_status"></result>
		<association property="userInfo" javaType="com.example.domain.UserInfo">
			<id property="id" column="c_user_info_id"></id>
			<result property="userName" column="c_user_name"></result>
			<result property="image" column="c_user_image"></result>
			<result property="followStatus" column="follow_status"></result>
		</association>
		<collection property="commentLikesUserList" ofType="com.example.domain.UserInfo">
			<result property="id" column="cl_user_info_id"></result>
			<result property="userName" column="cl_user_name"></result>
			<result property="engineerType" column="cl_engineer_type"></result>
			<result property="description" column="cl_description"></result>
			<result property="followStatus" column="cl_follow_status"></result>
		</collection>	
	</resultMap>
	<select id="getComment" resultMap="commentList">
		SELECT
		 	c.id,
			c.comment,
			c.comment_date,
			(SELECT id FROM user_info WHERE c.user_info_id = id) AS c_user_info_id,
			(SELECT user_name FROM user_info WHERE c.user_info_id = id) AS c_user_name,
			(SELECT image FROM user_info WHERE c.user_info_id = id) AS c_user_image,
 			CASE
				WHEN c.id IS NULL THEN NULL
				ELSE (SELECT COUNT(*) FROM comment_likes WHERE comments_id = c.id)
			END AS likes_count,
			CASE
				WHEN c.id IS NULL THEN NULL
				ELSE COALESCE((SELECT user_info_id = #{guestId} FROM comment_likes WHERE comments_id = c.id AND user_info_id = #{guestId}), 0)
			END AS like_status,
			CASE
				WHEN c.id IS NULL THEN NULL
				ELSE COALESCE((SELECT follow_user_info_id = c_user_info_id FROM follow WHERE user_info_id = #{guestId} AND follow_user_info_id = c_user_info_id),0)
			END AS follow_status,
			clu.id AS cl_user_info_id, 
			clu.user_name AS cl_user_name,
			clu.engineer_type AS cl_engineer_type,
			clu.description AS cl_description,
			CASE
				WHEN (SELECT id FROM user_info WHERE user_info.id = cl.user_info_id) IS NULL THEN NULL
				ELSE COALESCE((SELECT follow_user_info_id = cl_user_info_id FROM follow WHERE user_info_id = #{guestId} AND follow_user_info_id = cl_user_info_id), 0)
			END AS cl_follow_status
		FROM comments AS c
		LEFT OUTER JOIN comment_likes AS cl
		ON c.id = cl.comments_id 
		LEFT OUTER JOIN user_info AS clu 
		ON cl.user_info_id = clu.id 
		WHERE article_id = #{articleId}
	</select>
	
	<!-- コメント削除 -->
	<delete id="commentDelete" parameterType="com.example.form.CommentDeleteForm">
		DELETE FROM comments 
		WHERE user_info_id=#{guestId} AND id=#{commentId};
	</delete>

	<!-- コメントLIKE -->
	<insert id="commentLike"
		parameterType="com.example.form.CommentLikeForm">
		INSERT INTO comment_likes(user_info_id, comments_id)
		VALUES(#{userInfoId}, #{commentId});
	</insert>

	<!-- コメントLIKE解除 -->
	<delete id="removeCommentLike"
		parameterType="com.example.form.CommentLikeForm">
		DELETE FROM comment_likes WHERE user_info_id=#{userInfoId}
		AND comments_id=#{commentId};
	</delete>

	<!-- LIKE -->
	<insert id="articleLike"
		parameterType="com.example.form.ArticleLikeForm">
		INSERT INTO likes(user_info_id, article_id)
		VALUES(#{userInfoId},#{articleId});
	</insert>

	<!-- LIKE解除 -->
	<delete id="articleRemoveLike"
		parameterType="com.example.form.ArticleLikeForm">
		DELETE FROM likes WHERE user_info_id=#{userInfoId} AND
		article_id=#{articleId};
	</delete>

	<!-- 記事投稿 -->
	<insert id="articlePost"
		parameterType="com.example.domain.Article" useGeneratedKeys="true"
		keyProperty="id">
		INSERT INTO articles(
			user_info_id,
			title,
			content,
			article_status
			)
		VALUES(
			#{userInfoId},
			#{title},
			#{content},
			#{articleStatus}
			);
	</insert>

	<!-- 記事投稿（タグ情報を保存） -->
	<insert id="articleTagsPost">
		INSERT INTO article_tags(article_id, tag_id, tag_order)
		VALUES
		<foreach collection="tagId" item="tagId" separator="," index="i">
			(
			#{articleId},
			#{tagId},
			#{i}+1
			)
		</foreach>
	</insert>

	<!-- 記事削除 -->
	<delete id="articleDelete" parameterType="Integer">
		DELETE FROM articles
		WHERE id=#{articleId} AND user_info_id=#{guestId};
	</delete>

	<!-- タグ情報削除 -->
	<delete id="articleTagsDelete" parameterType="Integer">
		DELETE FROM
		article_tags
		WHERE article_id=#{articleId};
	</delete>

	<!-- 記事更新 -->
	<update id="articleEdit">
		UPDATE articles SET
		title=#{title},
		content=#{content},
		update_date=CURRENT_TIMESTAMP
		WHERE id=#{articleId} AND user_info_id=#{guestId};
	</update>
	
	<!-- 保存済み記事の操作 -->
	<update id="articleUpdate">
		UPDATE articles SET
			title=#{title},
			content=#{content},
			posted_date=#{postedDate},
			article_status=#{articleStatus}
		WHERE id=#{id}
		AND user_info_id=#{userInfoId};
	</update>

	<!-- 記事情報取得 -->
	<resultMap type="com.example.domain.Article" id="articleMap">
		<id property="id" column="a_id"></id>
		<result property="userInfoId" column="a_user_info_id"></result>
		<result property="title" column="a_title"></result>
		<result property="content" column="a_content"></result>
		<result property="likesCount" column="likes_count"></result>
		<result property="postedDate" column="a_posted_date"></result>
		<result property="updateDate" column="a_update_date"></result>
		<result property="likeStatus" column="like_status"></result>
		<result property="visitedCount" column="visited_count"  />
		<collection property="comments" ofType="com.example.domain.Comment">
			<result property="id" column="c_id"></result>
			<result property="userInfoId" column="c_user_info_id"></result>
			<result property="comment" column="c_comment"></result>
			<result property="commentDate" column="c_comment_date"></result>
			<result property="likesCount" column="c_likes_count"></result>
			<result property="likeStatus" column="c_likes_status"></result>
			<association property="userInfo"
				javaType="com.example.domain.UserInfo">
				<id property="id" column="c_user_info_id"></id>
				<result property="userName" column="c_user_name"></result>
				<result property="image" column="c_image"></result>
				<result property="followStatus" column="c_follow_status"></result>
			</association>
		</collection>
		<collection property="articleTags" ofType="com.example.domain.Tag">
			<result property="skill" column="tag_name"></result>
			<result property="id" column="tag_id"></result>
		</collection>
		<collection property="lieksUserList" ofType="com.example.domain.UserInfo">
			<result property="id" column="l_user_info_id"></result>
			<result property="userName" column="l_user_name"></result>
			<result property="engineerType" column="l_engineer_type"></result>
			<result property="description" column="l_description"></result>
			<result property="followStatus" column="l_follow_status"></result>
		</collection>
	</resultMap>

	<select id="articleDetail" resultMap="articleMap">
		SELECT
			a.id AS a_id,
			a.user_info_id AS a_user_info_id,
			a.title AS a_title,
			a.content AS a_content,
			(SELECT COUNT(*) from likes where article_id = a_id) AS likes_count,
			a.posted_date AS a_posted_date,
			a.update_date AS a_update_date,
			c.user_info_id AS c_user_info_id,
			a.visited_count,
			c.id AS c_id,
			c.comment AS c_comment,
			c.comment_date AS c_comment_date,
			(SELECT REPLACE(COUNT(*), 0, NULL) FROM comment_likes WHERE comments_id = c_id) AS c_likes_count,
			(SELECT user_info_id = #{guestId} FROM comment_likes WHERE comments_id = c_id AND user_info_id = #{guestId}) AS c_likes_status,
			COALESCE((SELECT user_info_id = #{guestId} FROM likes WHERE article_id = a.id AND user_info_id = #{guestId}), 0) AS like_status,
			(SELECT tags.id FROM tags WHERE at.tag_id = tags.id) AS tag_id,
			(SELECT tags.skill FROM tags WHERE at.tag_id = tags.id) AS tag_name,
			(SELECT id FROM user_info WHERE user_info.id = l.user_info_id) AS l_user_info_id,
			(SELECT user_name FROM user_info WHERE user_info.id = l.user_info_id) AS l_user_name,
			(SELECT engineer_type FROM user_info WHERE user_info.id = l.user_info_id) AS l_engineer_type,
			(SELECT description FROM user_info WHERE user_info.id = l.user_info_id) AS l_description,
			(SELECT user_name FROM user_info WHERE user_info.id = c.user_info_id) AS c_user_name,
			(SELECT image FROM user_info WHERE user_info.id = c.user_info_id) AS c_image,
			(SELECT follow_user_info_id = l_user_info_id FROM follow WHERE user_info_id = #{guestId} AND follow_user_info_id = l_user_info_id) AS c_follow_status,
			CASE
				WHEN (SELECT id FROM user_info WHERE user_info.id = l.user_info_id) IS NULL THEN NULL
				ELSE COALESCE((SELECT follow_user_info_id = l_user_info_id FROM follow WHERE user_info_id = #{guestId} AND follow_user_info_id = l_user_info_id), 0)
			END AS l_follow_status 
		FROM articles AS a
		LEFT OUTER JOIN comments AS c
		ON a.id = c.article_id 
		LEFT OUTER JOIN article_tags AS at
		ON a.id = at.article_id
		LEFT OUTER JOIN likes AS l
		ON a.id = l.article_id
		WHERE a.id = #{articleId}
		ORDER BY at.tag_order;
	</select>
	
	<!-- LIKEユーザーリスト -->
	<select id="likesUserList" resultType="com.example.domain.UserInfo">
		SELECT
			u.id,
			user_name,
			engineer_type,
			description,
			COALESCE((SELECT follow_user_info_id = u.id FROM follow WHERE user_info_id = #{userInfoId} AND follow_user_info_id = u.id), 0) AS follow_status
		FROM user_info AS u
		LEFT OUTER JOIN likes AS l
		ON u.id = l.user_info_id
		WHERE l.article_id = #{articleId};
	</select>
	
	<!-- コメントLIKEユーザーリスト -->
	<select id="commentLikesUserList" resultType="com.example.domain.UserInfo">
		SELECT
			u.id,
			user_name,
			engineer_type,
			description,
			COALESCE((SELECT follow_user_info_id = u.id FROM follow WHERE user_info_id = #{userInfoId} AND follow_user_info_id = u.id), 0) AS follow_status
		FROM user_info AS u
		LEFT OUTER JOIN comment_likes AS l
		ON u.id = l.user_info_id
		WHERE l.comments_id = #{commentId};
	</select>
	
	<!-- 訪問回数更新 -->
	<update id="updateVisitedCount">
		UPDATE articles 
		SET visited_count = visited_count + 1 
		WHERE id = #{articleId};
	</update>
	
	<resultMap type="com.example.domain.Tag" id="tag">
		<id column="tag_id" property="id" />
		<result column="skill" property="skill" />
		<result column="tag_image" property="image" />
	</resultMap>
	
	<resultMap type="com.example.domain.UserInfo" id="userInfo">
		<id column="user_info_id" property="id"/>
		<result column="user_name" property="userName"/>
 		<result column="image" property="image"/>
	</resultMap>

	<resultMap type="com.example.domain.Article" id="articleList">
		<id column="article_id" property="id" />
		<result column="user_info_id" property="userInfoId" />
		<result column="title" property="title" />
		<result column="content" property="content" />
		<result column="posted_date" property="postedDate" />
		<result column="visited_count" property="visitedCount"></result>
		<result column="likes_count" property="likesCount" />
		<result column="like_status" property="likeStatus" />
		<association property="userInfo" resultMap="userInfo" />
		<collection property="articleTags" resultMap="tag" />
	</resultMap>

	<!-- 投稿記事一覧取得 -->
	<select id="postedArticles" resultMap="articleList">
		SELECT
			a.id AS article_id,
			a.title,
			a.content,
			a.posted_date,
			a.visited_count,
			t.id AS tag_id, 
			t.skill, 
			t.image AS tag_image,
			(SELECT count(id) FROM likes WHERE article_id = a.id) AS likes_count,
			COALESCE((SELECT user_info_id = #{guestId} FROM likes WHERE article_id = a.id AND user_info_id = #{guestId}), 0) AS like_status, 
			u.id AS user_info_id,
			u.user_name,
			u.image
		FROM articles AS a
		LEFT JOIN article_tags AS at 
		ON at.article_id = a.id
		LEFT JOIN tags AS t 
		ON at.tag_id = t.id 
		LEFT JOIN user_info AS u
		ON a.user_info_id = u.id
		WHERE a.user_info_id = #{userInfoId}
		AND article_status = TRUE
		ORDER BY a.id DESC, at.tag_order; 
	</select>
	
	<!-- LIKE記事一覧取得 -->
	<select id="likedArticles" resultMap="articleList">
		SELECT
			a.id AS article_id,
			a.title,
			a.content,
			a.posted_date,
			a.visited_count,
			t.id AS tag_id, 
			t.skill, 
			t.image AS tag_image,
			(SELECT count(id) FROM likes WHERE article_id = a.id) AS likes_count,
			COALESCE((SELECT user_info_id = #{guestId} FROM likes WHERE article_id = a.id AND user_info_id = #{guestId}), 0) AS like_status, 
			u.id AS user_info_id,
			u.user_name,
			u.image
		FROM articles AS a
		LEFT JOIN article_tags AS at 
		ON at.article_id = a.id
		LEFT JOIN tags AS t 
		ON at.tag_id = t.id 
		LEFT JOIN user_info AS u
		ON a.user_info_id = u.id
		WHERE a.id IN(SELECT article_id FROM likes WHERE user_info_id = #{userInfoId})
		AND article_status = TRUE
		ORDER BY a.id DESC, at.tag_order;
	</select>
	
	<!-- 保存記事一覧 -->
	<select id="savedArticles" resultMap="articleList">
		SELECT
			a.id AS article_id,
			a.user_info_id,
			a.title,
			a.content,
			t.id AS tag_id,
			t.skill,
			t.image AS tag_image
		FROM articles AS a
		LEFT JOIN article_tags AS at 
		ON at.article_id = a.id
		LEFT JOIN tags AS t 
		ON at.tag_id = t.id 
		LEFT JOIN user_info AS u
		ON a.user_info_id = u.id
		WHERE a.user_info_id = #{guestId}
		AND article_status = FALSE
		ORDER BY a.id DESC, at.tag_order;
	</select>
	
	<!-- 投稿者確認（記事投稿者と一致を確認） -->
	<select id="checkGuest" resultType="com.example.domain.Article">
		SELECT *
		FROM articles 
		WHERE id = #{articleId} AND user_info_id =#{guestId};
	</select>

</mapper>